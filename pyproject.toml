[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "W", "I", "N", "UP", "B", "A", "C90", "S", "T20", "PT"]
ignore = ["C901"]  # Allow complex functions for algorithms and comprehensive tests

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/text blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["fmodel", "genfixtures"]

[tool.ruff.lint.per-file-ignores]
"*_test.py" = ["S101", "PT"]  # Allow assert statements and unittest-style assertions in test files
"genfixtures.py" = ["T201"]  # Allow print statements in fixtures generator

[tool.mypy]
# Basic configuration
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true

# Moderate strictness - good balance for existing code
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

# Error output
show_error_codes = true
show_column_numbers = true
pretty = true

# Allow some flexibility for existing code
disallow_untyped_defs = false  # Too strict for test files initially
disallow_incomplete_defs = false
no_implicit_optional = false

# Per-module options
# Be less strict on test files initially
[[tool.mypy.overrides]]
module = ["helpers_test", "model_test"]
ignore_errors = true

[tool.pytest]
# If pytest is installed, configure test discovery
testpaths = ["."]
python_files = ["*test*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Note: This project uses unittest, but pytest config is included
# for future compatibility. To use unittest, run: python run_tests.py
